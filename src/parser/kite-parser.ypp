%{
/*****************************************************************************
 * Copyright (c) 2012, Mooneer Salem
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Kite Language organization nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY MOONEER SALEM ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL MOONEER SALEM BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ****************************************************************************/
%}

%skeleton "lalr1.cc" /* -*- C++ -*- */
%require "2.5"
%defines
%define parser_class_name "kite_parser"

%code requires {
    #include <string>
    #include <sstream>
    #include <semantics/syntax_tree.h>
    #include "config.h"
    #include "stdlib/System/object.h"
    class kite_driver;
    
    namespace kite {
        namespace semantics {
            class syntax_tree;
        }
    }
    
    // Pre-define helper functions.
    template<typename T>
    kite::semantics::syntax_tree *generate_range_object(T location, int from, int to, int step = 1);
    template<typename T>
    kite::semantics::syntax_tree *generate_regex_object(T location, std::string regex, bool icase = false);
}

// The parsing context.
%parse-param { kite_driver *driver }
%lex-param   { void* scanner }

%locations
%pure-parser
%initial-action
{
    // Initialize the initial location.
    @$.begin.filename = @$.end.filename = &driver->file;
};

%debug
%error-verbose     

%code {
    #include "kite-driver.hh"
    #define scanner driver->scanner
}

%union 
{
    double doubleValue;
    long intValue;
    std::string *stringValue;
    kite::stdlib::System::object *internalValue;
    kite::semantics::syntax_tree *opValue;
    std::deque<kite::semantics::syntax_tree_node> *listValue;
}

%token IMPORT
%token METHOD
%token METHOD_REF
%token SYMBOL_NAME
%token FROM
%token CLASS
%token CONSTRUCT
%token DESTRUCT
%token PROPERTY
%token GLOBAL
%token PLUS
%token MINUS
%token MULTIPLY
%token DIVIDE
%token UNARY_PLUS
%token UNARY_MINUS
%token MAP
%token REDUCE
%token ARRAY_DEREF
%token EQUALS
%token NOT_EQUALS
%token LESS_THAN
%token GREATER_THAN
%token LESS_OR_EQUALS
%token GREATER_OR_EQUALS
%token AND
%token OR
%token NOT
%token STRING_VALUE
%token FLOAT_VALUE
%token INT_VALUE
%token MOD
%token OPERATOR
%token XOR
%token LEFT_SHIFT
%token RIGHT_SHIFT
%token EVAL
%token DECIDE
%token BOOL_VALUE
%token UNTIL
%token WHILE
%token RUN
%token CATCH
%token IS
%token ISOF
%token MAKE
%token METHOD_CALL
%token NULL_VALUE
%token DOCSTRING
%token BREAK
%token CONTINUE
%token RETURN
%token VERSION_KEYWORD
%token REGEX_VALUE
%token REGEX_VALUE_CI
%token ARRAY_SET
%token OPTIONS_SET
%token        END      0 "end of file"

/* Needed since we can't quite lay out the associativity using the rules yet. */
%left MAP
%left REDUCE

%%

result_grabber: pre_input { driver->result = $<opValue>1; }
    ;

pre_input: 
      DOCSTRING input {
          $<opValue>$ = $<opValue>2; 
          $<opValue>$->doc_string = *$<stringValue>1;
      }
    | VERSION_KEYWORD STRING_VALUE ';' { 
        driver->verify_version_less_than(@$, *$<stringValue>2, std::string(PACKAGE_VERSION));
      } input { $<opValue>$ = $<opValue>5; }
    | input { $<opValue>$ = $<opValue>1; }
    ;

input:    /* empty */ {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::ITERATE;
    }
    | statement ';' input {
        $<opValue>$ = $<opValue>3;
        if ($<opValue>1 != NULL)
        {
            $<opValue>$->children.push_front(*$<opValue>1);
        }
    }
    ;

statement: { $<opValue>$ = NULL; }
    | data_manipulation_statement { $<opValue>$ = $<opValue>1; }
    | options_set_statement { $<opValue>$ = $<opValue>1; }
    | loop_statement { $<opValue>$ = $<opValue>1; }
    /*| from_statement*/ /* TODO: inheritance without explicit class define. */
    | import_statement { $<opValue>$ = $<opValue>1; }
    | break_statement { $<opValue>$ = $<opValue>1; }
    | continue_statement { $<opValue>$ = $<opValue>1; }
    | return_statement { $<opValue>$ = $<opValue>1; }
    | class_definition { $<opValue>$ = $<opValue>1; }
    | property_definition { $<opValue>$ = $<opValue>1; }
    | decide_statement { $<opValue>$ = $<opValue>1; }
    | run_catch_statement { $<opValue>$ = $<opValue>1; }
    | constructor_definition { $<opValue>$ = $<opValue>1; }
    | destructor_definition { $<opValue>$ = $<opValue>1; }
    | operator_definition { $<opValue>$ = $<opValue>1; }
    ;

options_set_statement:  OPTIONS_SET STRING_VALUE STRING_VALUE {
    /* TODO */
};

import_statement:    IMPORT STRING_VALUE     {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::IMPORT;
        $<opValue>$->children.push_back(*$<stringValue>2);
    }
    ;

break_statement:    BREAK
    {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::BREAK;
    }
    ;

continue_statement: CONTINUE
    {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::CONTINUE;
    }
    ;

return_statement: RETURN
    {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::RETURN_VAL;
    }
    ;
        
optional_docstring:
    {
        $<stringValue>$ = new std::string;
    }
    | DOCSTRING {
        $<stringValue>$ = $<stringValue>1;
    }
    ;
        
method_declaration: METHOD SYMBOL_NAME optional_param_name_list optional_docstring '[' input ']' {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::METHOD;
        $<opValue>$->children.push_back(*$<stringValue>2);
        $<opValue>$->doc_string = *$<stringValue>4;
        
        std::deque<kite::semantics::syntax_tree_node> &param_names = *$<listValue>3;
        for (std::deque<kite::semantics::syntax_tree_node>::iterator i = param_names.begin();
             i != param_names.end();
             i++)
        {
            $<opValue>$->children.push_back(*i);
        }
        $<opValue>$->children.push_back(*$<opValue>6);
    }
    ;

anon_method_declaration: METHOD optional_param_name_list '[' input ']' {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::METHOD;
        $<opValue>$->children.push_back(std::string("__AnonMethod"));
        
        std::deque<kite::semantics::syntax_tree_node> &param_names = *$<listValue>2;
        for (std::deque<kite::semantics::syntax_tree_node>::iterator i = param_names.begin();
             i != param_names.end();
             i++)
        {
            $<opValue>$->children.push_back(*i);
        }
        
        $<opValue>$->children.push_back(*$<opValue>4);
    }
    | METHOD_REF '(' or_statement ',' STRING_VALUE ',' INT_VALUE ')' {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::METHOD_REF;
        $<opValue>$->children.push_back(*$<opValue>3);
        $<opValue>$->children.push_back(*$<stringValue>5);
        $<opValue>$->children.push_back((int)$<intValue>7);
    }
    ;
        
optional_global:    {
        $<intValue>$ = 0;
    }
    | GLOBAL    {
        $<intValue>$ = 1;
    }
    ;
    
optional_param_name_list:    {
        $<listValue>$ = new std::deque<kite::semantics::syntax_tree_node>();
    }
    | param_name_list    {
        $<opValue>$ = $<opValue>1;
    }
    ;
    
param_name_list:    '(' ')'    {
        $<listValue>$ = new std::deque<kite::semantics::syntax_tree_node>();
    }
    | '(' param_elements ')'    {
        $<opValue>$ = $<opValue>2;
    }
    ;
    
param_elements: SYMBOL_NAME optional_docstring   {
        $<listValue>$ = new std::deque<kite::semantics::syntax_tree_node>();
        $<listValue>$->push_back(*$<stringValue>1);
        $<listValue>$->push_back(*$<stringValue>2);
    }
    | SYMBOL_NAME optional_docstring ',' param_elements {
        $<listValue>4->push_back(*$<stringValue>1);
        $<listValue>4->push_back(*$<stringValue>2);
        $<opValue>$ = $<opValue>4;
    }
    ;
    
class_definition:    CLASS SYMBOL_NAME optional_from optional_docstring '[' class_body ']'    {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::CLASS;
        $<opValue>$->children.push_back(*$<stringValue>2);
        $<opValue>$->doc_string = *$<stringValue>4;
        
        if ($<opValue>3 != NULL)
        {
            $<opValue>$->children.push_back(*$<opValue>3);
        }
        $<opValue>$->children.push_back(*$<opValue>6);
    }
    ;
    
optional_from:        {
        $<opValue>$ = NULL;
    }
    | from_statement { $<opValue>$ = $<opValue>1; }
    ;

from_statement:
    FROM variable_immediate   {
        $<opValue>$ = $<opValue>2;
    }
    ;

variable_immediate:     
    variable_immediate '.' SYMBOL_NAME {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::DEREF_FILTER;
        $<opValue>$->children.push_back(*$<opValue>1);
        
        kite::semantics::syntax_tree deref_method(@$);
        deref_method.op = kite::semantics::DEREF_PROPERTY;
        deref_method.children.push_back(*$<stringValue>3);
        $<opValue>$->children.push_back(deref_method);
    }
    | SYMBOL_NAME {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::DEREF_FILTER;
        
        kite::semantics::syntax_tree deref_method(@$);
        deref_method.op = kite::semantics::VARIABLE;
        deref_method.children.push_back(*$<stringValue>1);
        $<opValue>$->children.push_back(deref_method);
    }

class_body:    
    {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::ITERATE; 
    }
    | class_elements { $<opValue>$ = $<opValue>1; }
    ;

class_elements:    class_element
    {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::ITERATE;
        $<opValue>$->children.push_back(*$<opValue>1);
    }
    | class_elements ',' class_element
    {
        $<opValue>$ = $<opValue>1;
        $<opValue>$->children.push_back(*$<opValue>3);
    }
    ;
    
class_element:    constructor_definition { $<opValue>$ = $<opValue>1; }
    | destructor_definition { $<opValue>$ = $<opValue>1; }
    | property_definition { $<opValue>$ = $<opValue>1; }
    | operator_definition { $<opValue>$ = $<opValue>1; }
    | class_definition { $<opValue>$ = $<opValue>1; }
    | data_manipulation_statement { $<opValue>$ = $<opValue>1; }
    ;

constructor_definition:    CONSTRUCT optional_param_name_list optional_docstring '[' input ']' {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::CONSTRUCTOR;

        std::deque<kite::semantics::syntax_tree_node> &param_names = *$<listValue>2;
        for (std::deque<kite::semantics::syntax_tree_node>::iterator i = param_names.begin();
             i != param_names.end();
             i++)
        {
            $<opValue>$->children.push_back(*i);
        }
        
        $<opValue>$->doc_string = *$<stringValue>3;
        $<opValue>$->children.push_back(*$<opValue>5);
    }
    ;
    
destructor_definition: DESTRUCT optional_docstring '[' input ']' {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::DESTRUCTOR;
        
        $<opValue>$->doc_string = *$<stringValue>2;
        $<opValue>$->children.push_back(*$<opValue>4);
    }
    ;
    
property_definition:    optional_global PROPERTY SYMBOL_NAME optional_docstring   {
        /* TODO: global does nothing here. */
        /* TODO: docstring */
    }
    | optional_global PROPERTY SYMBOL_NAME optional_docstring '=' {
        /* TODO: implementation */
        } data_manipulation_statement {
            /* TODO: implementation */
        }
    ;

operator_definition:    OPERATOR operator_type param_name_list optional_docstring '[' input ']' {
    $<opValue>$ = new kite::semantics::syntax_tree(@$);
    $<opValue>$->op = kite::semantics::OPERATOR;
    $<opValue>$->children.push_back(*$<stringValue>2);
    
    std::deque<kite::semantics::syntax_tree_node> &param_names = *$<listValue>3;
    for (std::deque<kite::semantics::syntax_tree_node>::iterator i = param_names.begin();
         i != param_names.end();
         i++)
    {
        $<opValue>$->children.push_back(*i);
    }
    
    $<opValue>$->doc_string = *$<stringValue>4;
    $<opValue>$->children.push_back(*$<opValue>6);
}
    ;
    
operator_type:    
      PLUS              { $<stringValue>$ = $<stringValue>1; }
    | MINUS             { $<stringValue>$ = $<stringValue>1; }
    | MULTIPLY          { $<stringValue>$ = $<stringValue>1; }
    | DIVIDE            { $<stringValue>$ = $<stringValue>1; }
    | MOD               { $<stringValue>$ = $<stringValue>1; }
    | UNARY_PLUS        { $<stringValue>$ = $<stringValue>1; }
    | UNARY_MINUS       { $<stringValue>$ = $<stringValue>1; }
    | MAP               { $<stringValue>$ = $<stringValue>1; }
    | REDUCE            { $<stringValue>$ = $<stringValue>1; }
    | ARRAY_DEREF       { $<stringValue>$ = $<stringValue>1; }
    | ARRAY_SET         { $<stringValue>$ = $<stringValue>1; }
    | EQUALS            { $<stringValue>$ = $<stringValue>1; }
    | NOT_EQUALS        { $<stringValue>$ = $<stringValue>1; }
    | LESS_THAN         { $<stringValue>$ = $<stringValue>1; }
    | GREATER_THAN      { $<stringValue>$ = $<stringValue>1; }
    | LESS_OR_EQUALS    { $<stringValue>$ = $<stringValue>1; }
    | GREATER_OR_EQUALS { $<stringValue>$ = $<stringValue>1; }
    | AND               { $<stringValue>$ = $<stringValue>1; }
    | OR                { $<stringValue>$ = $<stringValue>1; }
    | NOT               { $<stringValue>$ = $<stringValue>1; }
    | XOR               { $<stringValue>$ = $<stringValue>1; }
    | LEFT_SHIFT        { $<stringValue>$ = $<stringValue>1; }
    | RIGHT_SHIFT       { $<stringValue>$ = $<stringValue>1; }
    | METHOD_CALL       { $<stringValue>$ = $<stringValue>1; }
    | PROPERTY          { $<stringValue>$ = $<stringValue>1; }
    ;

data_manipulation_statement:   
      assignment_statement { $<opValue>$ = $<opValue>1; }
    | method_declaration   { $<opValue>$ = $<opValue>1; }
    | eval_statement       { $<opValue>$ = $<opValue>1; }
    ;
    
assignment_statement:    deref_statement '=' data_manipulation_statement {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::ASSIGN;
        $<opValue>$->children.push_back(*$<opValue>1);
        $<opValue>$->children.push_back(*$<opValue>3);
    }
    | or_statement { $<opValue>$ = $<opValue>1; }
    ;
    
or_statement:        xor_statement OR or_statement {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::OR;
        $<opValue>$->children.push_back(*$<opValue>1);
        $<opValue>$->children.push_back(*$<opValue>3);
    }
    | xor_statement { $<opValue>$ = $<opValue>1; }
    ;

xor_statement:    xor_statement XOR and_statement {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::XOR;
        $<opValue>$->children.push_back(*$<opValue>1);
        $<opValue>$->children.push_back(*$<opValue>3);
    }
    | and_statement { $<opValue>$ = $<opValue>1; }
    ;
    
and_statement:    bitwise_statement AND and_statement {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::AND;
        $<opValue>$->children.push_back(*$<opValue>1);
        $<opValue>$->children.push_back(*$<opValue>3);
    }
    | bitwise_statement { $<opValue>$ = $<opValue>1; }
    ;

bitwise_statement:    bitwise_statement LEFT_SHIFT equality_statement {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::LEFT_SHIFT;
        $<opValue>$->children.push_back(*$<opValue>1);
        $<opValue>$->children.push_back(*$<opValue>3);
    }
    | bitwise_statement RIGHT_SHIFT equality_statement {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::RIGHT_SHIFT;
        $<opValue>$->children.push_back(*$<opValue>1);
        $<opValue>$->children.push_back(*$<opValue>3);
    }
    | equality_statement { $<opValue>$ = $<opValue>1; }
    ;
    
equality_statement:    equality_statement EQUALS less_greater_statement {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::EQUALS;
        $<opValue>$->children.push_back(*$<opValue>1);
        $<opValue>$->children.push_back(*$<opValue>3);
    }
    | equality_statement NOT_EQUALS less_greater_statement {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::NOT_EQUALS;
        $<opValue>$->children.push_back(*$<opValue>1);
        $<opValue>$->children.push_back(*$<opValue>3);
    }
    | equality_statement IS less_greater_statement {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::IS_CLASS;
        $<opValue>$->children.push_back(*$<opValue>1);
        $<opValue>$->children.push_back(*$<opValue>3);
    }
    | equality_statement ISOF less_greater_statement {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::ISOF_CLASS;
        $<opValue>$->children.push_back(*$<opValue>1);
        $<opValue>$->children.push_back(*$<opValue>3);
    }
    | less_greater_statement { $<opValue>$ = $<opValue>1; }
    ;
    
less_greater_statement:    less_greater_statement '<' add_sub_statement {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::LESS_THAN;
        $<opValue>$->children.push_back(*$<opValue>1);
        $<opValue>$->children.push_back(*$<opValue>3);
    }
    | less_greater_statement '>' add_sub_statement {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::GREATER_THAN;
        $<opValue>$->children.push_back(*$<opValue>1);
        $<opValue>$->children.push_back(*$<opValue>3);
    }
    | less_greater_statement LESS_OR_EQUALS add_sub_statement {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::LESS_OR_EQUALS;
        $<opValue>$->children.push_back(*$<opValue>1);
        $<opValue>$->children.push_back(*$<opValue>3);
    }
    | less_greater_statement GREATER_OR_EQUALS add_sub_statement {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::GREATER_OR_EQUALS;
        $<opValue>$->children.push_back(*$<opValue>1);
        $<opValue>$->children.push_back(*$<opValue>3);
    }
    | add_sub_statement { $<opValue>$ = $<opValue>1; }
    ;
    
add_sub_statement:    add_sub_statement '+' multdiv_statement {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::ADD;
        $<opValue>$->children.push_back(*$<opValue>1);
        $<opValue>$->children.push_back(*$<opValue>3);
    }
    | add_sub_statement '-' multdiv_statement {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::SUBTRACT;
        $<opValue>$->children.push_back(*$<opValue>1);
        $<opValue>$->children.push_back(*$<opValue>3);
    }
    | multdiv_statement { $<opValue>$ = $<opValue>1; }
    ;
    
multdiv_statement:    multdiv_statement '*' unary_statement {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::MULTIPLY;
        $<opValue>$->children.push_back(*$<opValue>1);
        $<opValue>$->children.push_back(*$<opValue>3);
    }
    | multdiv_statement '/' unary_statement {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::DIVIDE;
        $<opValue>$->children.push_back(*$<opValue>1);
        $<opValue>$->children.push_back(*$<opValue>3);
    }
    | multdiv_statement '%' unary_statement {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::MODULO;
        $<opValue>$->children.push_back(*$<opValue>1);
        $<opValue>$->children.push_back(*$<opValue>3);
    }
    | unary_statement { $<opValue>$ = $<opValue>1; }
    ;
    
unary_statement: '+' unary_statement {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::UNARY_PLUS;
        $<opValue>$->children.push_back(*$<opValue>2);
    }
    | '-' unary_statement {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::UNARY_MINUS;
        $<opValue>$->children.push_back(*$<opValue>2);
    }
    | NOT unary_statement {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::NOT;
        $<opValue>$->children.push_back(*$<opValue>2);
    }
    | map_reduce_statement { $<opValue>$ = $<opValue>1; }
    ;
    
map_reduce_statement:    deref_statement MAP deref_statement {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::MAP;
        $<opValue>$->children.push_back(*$<opValue>1);
        $<opValue>$->children.push_back(*$<opValue>3);
    }
    | deref_statement REDUCE deref_statement {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::REDUCE;
        $<opValue>$->children.push_back(*$<opValue>1);
        $<opValue>$->children.push_back(*$<opValue>3);
    }
    | deref_statement { $<opValue>$ = $<opValue>1; }
    ;
    
deref_statement:    deref_statement '|' SYMBOL_NAME optional_param_list {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::DEREF_FILTER;
        $<opValue>$->children.push_back(*$<opValue>1);
        
        kite::semantics::syntax_tree deref_method(@$);
        deref_method.op = kite::semantics::DEREF_METHOD;
        deref_method.children.push_back(*$<stringValue>3);
        std::deque<kite::semantics::syntax_tree_node> &param_names = *$<listValue>4;
        for (std::deque<kite::semantics::syntax_tree_node>::iterator i = param_names.begin();
             i != param_names.end();
             i++)
        {
            deref_method.children.push_back(*i);
        }
        $<opValue>$->children.push_back(deref_method);
    }
    | deref_statement '[' data_manipulation_statement ']'    {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::DEREF_FILTER;
        $<opValue>$->children.push_back(*$<opValue>1);
        
        kite::semantics::syntax_tree deref_method(@$);
        deref_method.op = kite::semantics::DEREF_ARRAY;
        deref_method.children.push_back(*$<opValue>3);
        $<opValue>$->children.push_back(deref_method);
    }
    | deref_statement '.' SYMBOL_NAME {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::DEREF_FILTER;
        $<opValue>$->children.push_back(*$<opValue>1);
        
        kite::semantics::syntax_tree deref_method(@$);
        deref_method.op = kite::semantics::DEREF_PROPERTY;
        deref_method.children.push_back(*$<stringValue>3);
        $<opValue>$->children.push_back(deref_method);
    }
    | SYMBOL_NAME param_list { 
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::DEREF_FILTER;
        
        kite::semantics::syntax_tree deref_method(@$);
        deref_method.op = kite::semantics::DEREF_METHOD_RELATIVE_SELF;
        deref_method.children.push_back(*$<stringValue>1);
        std::deque<kite::semantics::syntax_tree_node> &param_names = *$<listValue>2;
        for (std::deque<kite::semantics::syntax_tree_node>::iterator i = param_names.begin();
             i != param_names.end();
             i++)
        {
            deref_method.children.push_back(*i);
        }
        $<opValue>$->children.push_back(deref_method);
    }
    | SYMBOL_NAME {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::DEREF_FILTER;
        
        kite::semantics::syntax_tree deref_method(@$);
        deref_method.op = kite::semantics::VARIABLE;
        deref_method.children.push_back(*$<stringValue>1);
        $<opValue>$->children.push_back(deref_method);
    }
    | constant_statement {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::DEREF_FILTER;
        $<opValue>$->children.push_back(*$<opValue>1);
    }
    ;

optional_param_list: {
        $<listValue>$ = new std::deque<kite::semantics::syntax_tree_node>;
    }
    | param_list {
        $<listValue>$ = $<listValue>1;
    }
    ;

param_list:    '(' ')' {
        $<listValue>$ = new std::deque<kite::semantics::syntax_tree_node>;
    }
    | '(' params_list ')' {
        $<listValue>$ = $<listValue>2;
    }
    ;

params_list: data_manipulation_statement    {
        $<listValue>$ = new std::deque<kite::semantics::syntax_tree_node>;
        $<listValue>$->push_back(*$<opValue>1);
    }
    | data_manipulation_statement ',' params_list    {
        $<listValue>$ = $<listValue>3;
        $<listValue>$->push_front(*$<opValue>1);
    }
    ;
    
var_name:    SYMBOL_NAME {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::DEREF_FILTER;
        
        kite::semantics::syntax_tree deref_method(@$);
        deref_method.op = kite::semantics::VARIABLE;
        deref_method.children.push_back(*$<stringValue>1);
        $<opValue>$->children.push_back(deref_method);
    }
    | var_name '.' SYMBOL_NAME {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::DEREF_FILTER;
        $<opValue>$->children.push_back(*$<opValue>1);
        
        kite::semantics::syntax_tree deref_method(@$);
        deref_method.op = kite::semantics::DEREF_PROPERTY;
        deref_method.children.push_back(*$<stringValue>3);
        $<opValue>$->children.push_back(deref_method);
    }
    ;
    
constant_statement:    
      STRING_VALUE { 
          $<opValue>$ = new kite::semantics::syntax_tree(@$);
          $<opValue>$->op = kite::semantics::CONST;
          $<opValue>$->children.push_back(*$<stringValue>1); 
      }
    | INT_VALUE {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::CONST;
        $<opValue>$->children.push_back((int)$<intValue>1);
    }
    | FLOAT_VALUE {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::CONST;
        $<opValue>$->children.push_back($<doubleValue>1);
    }
    | BOOL_VALUE {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::CONST;
        $<opValue>$->children.push_back((bool)$<intValue>1);
    }
    | NULL_VALUE {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::CONST;
        $<opValue>$->children.push_back((void*)NULL);
    }
    | INT_VALUE ':' INT_VALUE
    {
        $<opValue>$ = generate_range_object(@$, $<intValue>1, $<intValue>3);
    }
    | INT_VALUE ':' INT_VALUE ':' INT_VALUE
    {
        $<opValue>$ = generate_range_object(@$, $<intValue>1, $<intValue>3, $<intValue>5);
    }
    | REGEX_VALUE {
        $<opValue>$ = generate_regex_object(@$, *$<stringValue>1);
    }
    | REGEX_VALUE_CI {
        $<opValue>$ = generate_regex_object(@$, *$<stringValue>1, true);
    }
    | list_value { $<opValue>$ = $<opValue>1; }
    | construct_object_statement { $<opValue>$ = $<opValue>1; }
    | anon_method_declaration { $<opValue>$ = $<opValue>1; }
    | '(' data_manipulation_statement ')' { $<opValue>$ = $<opValue>2; }
    ;

construct_object_statement:    MAKE var_name param_list    {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::MAKE;
        $<opValue>$->children.push_back(*$<opValue>2);
        std::deque<kite::semantics::syntax_tree_node> &param_names = *$<listValue>3;
        for (std::deque<kite::semantics::syntax_tree_node>::iterator i = param_names.begin();
             i != param_names.end();
             i++)
        {
            $<opValue>$->children.push_back(*i);
        }
    }
    ;
    
list_value: '[' ']' {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::LIST_VAL;
    }
    | '[' list_elements ']' { $<opValue>$ = $<opValue>2; }
    ;
    
list_elements: list_element    {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::LIST_VAL;
        $<opValue>$->children.push_back(*$<opValue>1);
    }
    | list_element ',' list_elements    {
        $<opValue>$ = $<opValue>3;
        $<opValue>$->children.push_front(*$<opValue>1);
    }
    ;

list_element:    or_statement { $<opValue>$ = $<opValue>1; }
    ;
    
decide_statement:    DECIDE '[' decide_contents ']' {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::DECIDE;
        
        std::deque<kite::semantics::syntax_tree_node> &param_names = *$<listValue>3;
        for (std::deque<kite::semantics::syntax_tree_node>::iterator i = param_names.begin();
             i != param_names.end();
             i++)
        {
            $<opValue>$->children.push_back(*i);
        }
    }
    ;
    
decide_contents:    
      decide_condition {
          $<listValue>$ = $<listValue>1;
      }
    | decide_contents ',' decide_condition {
        $<listValue>$ = $<listValue>1;
        std::deque<kite::semantics::syntax_tree_node> &param_names = *$<listValue>3;
          for (std::deque<kite::semantics::syntax_tree_node>::iterator i = param_names.begin();
               i != param_names.end();
               i++)
          {
              $<listValue>$->push_back(*i);
          }
    }
    ;
    
decide_condition:    constant_statement '[' input ']'    {
        $<listValue>$ = new std::deque<kite::semantics::syntax_tree_node>;
        $<listValue>$->push_back(*$<opValue>1);
        $<listValue>$->push_back(*$<opValue>3);
    }
    ;
    
eval_statement:    EVAL or_statement {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::EVAL;
        $<opValue>$->children.push_back(*$<opValue>2);
    }
    ;

loop_statement:    loop_type '[' input ']'    {
        $<opValue>$ = $<opValue>1;
        $<opValue>$->children.push_back(*$<opValue>3);
    }
    ;

loop_type:    WHILE constant_statement    {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::WHILE;
        $<opValue>$->children.push_back(*$<opValue>2);
    }
    | UNTIL constant_statement    {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::UNTIL;
        $<opValue>$->children.push_back(*$<opValue>2);
    }
    ;

run_catch_statement: RUN '[' input ']' CATCH '[' input ']' {
        $<opValue>$ = new kite::semantics::syntax_tree(@$);
        $<opValue>$->op = kite::semantics::RUN_CATCH;
        $<opValue>$->children.push_back(*$<opValue>3);
        $<opValue>$->children.push_back(*$<opValue>7);
    }
    ;
    
%%

void
yy::kite_parser::error (const yy::kite_parser::location_type& l,
                        const std::string& m)
{
    driver->error (l, m);
}

void kite_driver::verify_version_less_than(
    const yy::kite_parser::location_type& l,
    std::string version1, 
    std::string version2)
{
    // Could probably be more efficient.
    std::stringstream v1(version1);
    std::stringstream v2(version2);
    
    while (!v1.eof() && !v2.eof())
    {
        int component1;
        int component2;
        
        v1 >> component1;
        v2 >> component2;
        
        if (component1 > component2)
        {
            // Invalid version.
            std::stringstream output;
            output << "Version " << version1 << " code is not supported by this version of Kite.";
            error(l, output.str());
        }
        
        char tmp;
        v1 >> tmp;
        v2 >> tmp;
    }
}

template<typename T>
kite::semantics::syntax_tree *generate_range_object(T location, int from, int to, int step = 1)
{
    kite::semantics::syntax_tree *ret = new kite::semantics::syntax_tree(location);
    ret->op = kite::semantics::MAKE;
    
    kite::semantics::syntax_tree deref_filter(location);
    deref_filter.op = kite::semantics::DEREF_FILTER;
    
    kite::semantics::syntax_tree variable(location);
    variable.op = kite::semantics::VARIABLE;
    variable.children.push_back(std::string("System"));
    deref_filter.children.push_back(variable);
    
    kite::semantics::syntax_tree deref_property_1(location);
    deref_property_1.op = kite::semantics::DEREF_PROPERTY;
    deref_property_1.children.push_back(std::string("math"));
    deref_filter.children.push_back(deref_property_1);
    
    kite::semantics::syntax_tree deref_property_2(location);
    deref_property_2.op = kite::semantics::DEREF_PROPERTY;
    deref_property_2.children.push_back(std::string("range"));
    deref_filter.children.push_back(deref_property_2);
    
    ret->children.push_back(deref_filter);
    
    kite::semantics::syntax_tree from_range(location);
    from_range.op = kite::semantics::CONST;
    from_range.children.push_back(from);
    ret->children.push_back(from_range);
    
    kite::semantics::syntax_tree to_range(location);
    to_range.op = kite::semantics::CONST;
    to_range.children.push_back(to);
    ret->children.push_back(to_range);
    
    kite::semantics::syntax_tree step_range(location);
    step_range.op = kite::semantics::CONST;
    step_range.children.push_back(step);
    ret->children.push_back(step_range);
    
    return ret;
}

template<typename T>
kite::semantics::syntax_tree *generate_regex_object(T location, std::string regex, bool icase)
{
    kite::semantics::syntax_tree *ret = new kite::semantics::syntax_tree(location);
    ret->op = kite::semantics::MAKE;
    
    kite::semantics::syntax_tree deref_filter(location);
    deref_filter.op = kite::semantics::DEREF_FILTER;
    
    kite::semantics::syntax_tree variable(location);
    variable.op = kite::semantics::VARIABLE;
    variable.children.push_back(std::string("System"));
    deref_filter.children.push_back(variable);
    
    kite::semantics::syntax_tree deref_property_1(location);
    deref_property_1.op = kite::semantics::DEREF_PROPERTY;
    deref_property_1.children.push_back(std::string("regex"));
    deref_filter.children.push_back(deref_property_1);

    ret->children.push_back(deref_filter);
    
    kite::semantics::syntax_tree from_range(location);
    from_range.op = kite::semantics::CONST;
    from_range.children.push_back(regex);
    ret->children.push_back(from_range);
    
    kite::semantics::syntax_tree to_range(location);
    to_range.op = kite::semantics::CONST;
    to_range.children.push_back(icase);
    ret->children.push_back(to_range);
        
    return ret;
}